// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: zena/zena.proto

package zena

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZenaApiClient is the client API for ZenaApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZenaApiClient interface {
	GetRootHash(ctx context.Context, in *GetRootHashRequest, opts ...grpc.CallOption) (*GetRootHashResponse, error)
	GetVoteOnHash(ctx context.Context, in *GetVoteOnHashRequest, opts ...grpc.CallOption) (*GetVoteOnHashResponse, error)
	HeaderByNumber(ctx context.Context, in *GetHeaderByNumberRequest, opts ...grpc.CallOption) (*GetHeaderByNumberResponse, error)
	BlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*GetBlockByNumberResponse, error)
	TransactionReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
	ZenaBlockReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
}

type zenaApiClient struct {
	cc grpc.ClientConnInterface
}

func NewZenaApiClient(cc grpc.ClientConnInterface) ZenaApiClient {
	return &zenaApiClient{cc}
}

func (c *zenaApiClient) GetRootHash(ctx context.Context, in *GetRootHashRequest, opts ...grpc.CallOption) (*GetRootHashResponse, error) {
	out := new(GetRootHashResponse)
	err := c.cc.Invoke(ctx, "/zena.ZenaApi/GetRootHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenaApiClient) GetVoteOnHash(ctx context.Context, in *GetVoteOnHashRequest, opts ...grpc.CallOption) (*GetVoteOnHashResponse, error) {
	out := new(GetVoteOnHashResponse)
	err := c.cc.Invoke(ctx, "/zena.ZenaApi/GetVoteOnHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenaApiClient) HeaderByNumber(ctx context.Context, in *GetHeaderByNumberRequest, opts ...grpc.CallOption) (*GetHeaderByNumberResponse, error) {
	out := new(GetHeaderByNumberResponse)
	err := c.cc.Invoke(ctx, "/zena.ZenaApi/HeaderByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenaApiClient) BlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*GetBlockByNumberResponse, error) {
	out := new(GetBlockByNumberResponse)
	err := c.cc.Invoke(ctx, "/zena.ZenaApi/BlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenaApiClient) TransactionReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, "/zena.ZenaApi/TransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenaApiClient) ZenaBlockReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, "/zena.ZenaApi/ZenaBlockReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZenaApiServer is the server API for ZenaApi service.
// All implementations must embed UnimplementedZenaApiServer
// for forward compatibility
type ZenaApiServer interface {
	GetRootHash(context.Context, *GetRootHashRequest) (*GetRootHashResponse, error)
	GetVoteOnHash(context.Context, *GetVoteOnHashRequest) (*GetVoteOnHashResponse, error)
	HeaderByNumber(context.Context, *GetHeaderByNumberRequest) (*GetHeaderByNumberResponse, error)
	BlockByNumber(context.Context, *GetBlockByNumberRequest) (*GetBlockByNumberResponse, error)
	TransactionReceipt(context.Context, *ReceiptRequest) (*ReceiptResponse, error)
	ZenaBlockReceipt(context.Context, *ReceiptRequest) (*ReceiptResponse, error)
	mustEmbedUnimplementedZenaApiServer()
}

// UnimplementedZenaApiServer must be embedded to have forward compatible implementations.
type UnimplementedZenaApiServer struct {
}

func (UnimplementedZenaApiServer) GetRootHash(context.Context, *GetRootHashRequest) (*GetRootHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootHash not implemented")
}
func (UnimplementedZenaApiServer) GetVoteOnHash(context.Context, *GetVoteOnHashRequest) (*GetVoteOnHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteOnHash not implemented")
}
func (UnimplementedZenaApiServer) HeaderByNumber(context.Context, *GetHeaderByNumberRequest) (*GetHeaderByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeaderByNumber not implemented")
}
func (UnimplementedZenaApiServer) BlockByNumber(context.Context, *GetBlockByNumberRequest) (*GetBlockByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockByNumber not implemented")
}
func (UnimplementedZenaApiServer) TransactionReceipt(context.Context, *ReceiptRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionReceipt not implemented")
}
func (UnimplementedZenaApiServer) ZenaBlockReceipt(context.Context, *ReceiptRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZenaBlockReceipt not implemented")
}
func (UnimplementedZenaApiServer) mustEmbedUnimplementedZenaApiServer() {}

// UnsafeZenaApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZenaApiServer will
// result in compilation errors.
type UnsafeZenaApiServer interface {
	mustEmbedUnimplementedZenaApiServer()
}

func RegisterZenaApiServer(s grpc.ServiceRegistrar, srv ZenaApiServer) {
	s.RegisterService(&ZenaApi_ServiceDesc, srv)
}

func _ZenaApi_GetRootHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenaApiServer).GetRootHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zena.ZenaApi/GetRootHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenaApiServer).GetRootHash(ctx, req.(*GetRootHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenaApi_GetVoteOnHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteOnHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenaApiServer).GetVoteOnHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zena.ZenaApi/GetVoteOnHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenaApiServer).GetVoteOnHash(ctx, req.(*GetVoteOnHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenaApi_HeaderByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeaderByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenaApiServer).HeaderByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zena.ZenaApi/HeaderByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenaApiServer).HeaderByNumber(ctx, req.(*GetHeaderByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenaApi_BlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenaApiServer).BlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zena.ZenaApi/BlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenaApiServer).BlockByNumber(ctx, req.(*GetBlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenaApi_TransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenaApiServer).TransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zena.ZenaApi/TransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenaApiServer).TransactionReceipt(ctx, req.(*ReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenaApi_ZenaBlockReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenaApiServer).ZenaBlockReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zena.ZenaApi/ZenaBlockReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenaApiServer).ZenaBlockReceipt(ctx, req.(*ReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZenaApi_ServiceDesc is the grpc.ServiceDesc for ZenaApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZenaApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zena.ZenaApi",
	HandlerType: (*ZenaApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootHash",
			Handler:    _ZenaApi_GetRootHash_Handler,
		},
		{
			MethodName: "GetVoteOnHash",
			Handler:    _ZenaApi_GetVoteOnHash_Handler,
		},
		{
			MethodName: "HeaderByNumber",
			Handler:    _ZenaApi_HeaderByNumber_Handler,
		},
		{
			MethodName: "BlockByNumber",
			Handler:    _ZenaApi_BlockByNumber_Handler,
		},
		{
			MethodName: "TransactionReceipt",
			Handler:    _ZenaApi_TransactionReceipt_Handler,
		},
		{
			MethodName: "ZenaBlockReceipt",
			Handler:    _ZenaApi_ZenaBlockReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zena/zena.proto",
}
